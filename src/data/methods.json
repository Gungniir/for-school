{
  "isIsogram": "/**\n     * Проверяет, не повторяются ли символы в строке\n     * @param {{str: String}} params\n     * @return {Boolean}\n     */\n    isIsogram(params) {\n        let used = new Map();\n        let chars = params.str.toLowerCase().split('');\n        for (let char of chars) {\n            if (used.get(char)) {\n                return false;\n            }\n            used.set(char, true);\n        }\n        return true;\n    }",
  "songDecoder": "/**\n     * Получается исходную песню из ремикса\n     * @param {{song: String}} params\n     * @return {String}\n     */\n    songDecoder(params) {\n        return params.song.replace(/(WUB)+/g, ' ').trim();\n    }",
  "sumMinValueInEachRow": "/**\n     * Подсчет суммы минимальных значений в каждой строке\n     * @param {{matrix: String}} params\n     * @return {Number}\n     */\n    sumMinValueInEachRow(params) {\n        return JSON.parse(params.matrix).map(array => {\n            let min = array[0];\n            array.forEach(item => {\n                if (item < min) {\n                    min = item;\n                }\n            });\n            return min;\n        }).reduce((a, b) => a + b);\n    }",
  "task1_23042020": "/**\n     * Задача 1\n     * @param {{console: {getLine: function}}} params\n     */\n    task1_23042020(params) {\n        let a = [0, 0, 0]\n        let queue = [];\n        let out = 0;\n\n        let n = Number(params.console.getLine())\n        for (let i = 0; i < n; i++) {\n            let b = Number(params.console.getLine()) % 3;\n            queue.push(b)\n\n            if (queue.length > 4) {\n                a[queue.shift()]++;\n            }\n\n            if (b === 0) {\n                out += a[1] + a[2]\n            }\n            else {\n                out += a[0]\n            }\n        }\n\n        return out;\n    }",
  "task2_23042020": "/**\n     * Задача 2\n     * @param {{console: {getLine: function}}} params\n     */\n    task2_23042020(params) {\n        let a = [0, 0, 0, 0] //0 - ^, 1 - %2, 2 - %5, 3 - %10\n        let queue = [];\n        let out = 0;\n\n        let n = Number(params.console.getLine())\n        for (let i = 0; i < n; i++) {\n            let b = Number(params.console.getLine());\n\n            if (b % 10 === 0) {\n                b = 3;\n            } else if (b % 5 === 0) {\n                b = 2\n            } else if (b % 2 === 0) {\n                b = 1\n            } else {\n                b = 0\n            }\n\n            queue.push(b)\n\n            if (queue.length > 10) {\n                a[queue.shift()]++;\n            }\n\n            switch (b) {\n                case 0:\n                    out += a[3]\n                    break\n                case 1:\n                    out += a[2] + a[3]\n                    break\n                case 2:\n                    out += a[1] + a[3]\n                    break\n                case 3:\n                    out += a.reduce((a, b) => a + b)\n                    break\n            }\n        }\n\n        return out;\n    }",
  "task3_23042020": "/**\n     * Задача 3\n     * @param {{console: {getLine: function}}} params\n     */\n    task3_23042020(params) {\n        class Bone {\n            constructor(str) {\n                this.a = Number(str.split(' ')[0])\n                this.b = Number(str.split(' ')[1])\n            }\n\n            reverse() {\n                return new Bone(this.b, this.a)\n            }\n        }\n\n        let n = Number(params.console.getLine());\n        let max = 0\n        let bone1 = new Bone(params.console.getLine())\n        let map = [1, 1]\n\n        for (let i = 0; i < n - 1; i++) {\n            let bone2 = new Bone(params.console.getLine())\n            let newMap = [1, 1]\n\n            debugger\n            if (bone1.a === bone2.a && bone1.b === bone2.a) {\n                newMap[0] = Math.max(map[0] + 1, map[1] + 1)\n            }\n            else if (bone1.a === bone2.a) {\n                newMap[0] = map[1] + 1\n            }\n            else if (bone1.b === bone2.a) {\n                newMap[0] = map[0] + 1\n            }\n\n            if (bone1.a === bone2.b && bone1.b === bone2.b) {\n                newMap[1] = Math.max(map[0] + 1, map[1] + 1)\n            }\n            else if (bone1.a === bone2.b) {\n                newMap[1] = map[1] + 1\n            }\n            else if (bone1.b === bone2.b) {\n                newMap[1] = map[0] + 1\n            }\n\n            max = Math.max(newMap[0], newMap[1], max)\n            map = newMap\n            bone1 = bone2\n        }\n\n        return max\n    }"
}
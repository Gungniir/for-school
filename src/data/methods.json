{
  "isIsogram": "/**\n     * Проверяет, не повторяются ли символы в строке\n     * @param {{str: String}} params\n     * @return {Boolean}\n     */\n    isIsogram(params) {\n        let used = new Map();\n        let chars = params.str.toLowerCase().split('');\n        for (let char of chars) {\n            if (used.get(char)) {\n                return false;\n            }\n            used.set(char, true);\n        }\n        return true;\n    }",
  "songDecoder": "/**\n     * Получается исходную песню из ремикса\n     * @param {{song: String}} params\n     * @return {String}\n     */\n    songDecoder(params) {\n        return params.song.replace(/(WUB)+/g, ' ').trim();\n    }",
  "sumMinValueInEachRow": "/**\n     * Подсчет суммы минимальных значений в каждой строке\n     * @param {{matrix: String}} params\n     * @return {Number}\n     */\n    sumMinValueInEachRow(params) {\n        return JSON.parse(params.matrix).map(array => {\n            let min = array[0];\n            array.forEach(item => {\n                if (item < min) {\n                    min = item;\n                }\n            });\n            return min;\n        }).reduce((a, b) => a + b);\n    }",
  "task1_23042020": "/**\n     * Задача 1\n     * @param {{console: {getLine: function}}} params\n     */\n    task1_23042020(params) {\n        let a = [0, 0, 0]\n        let queue = [];\n        let out = 0;\n\n        let n = Number(params.console.getLine())\n        for (let i = 0; i < n; i++) {\n            let b = Number(params.console.getLine()) % 3;\n            queue.push(b)\n\n            if (queue.length > 4) {\n                a[queue.shift()]++;\n            }\n\n            if (b === 0) {\n                out += a[1] + a[2]\n            }\n            else {\n                out += a[0]\n            }\n        }\n\n        return out;\n    }",
  "task2_23042020": "/**\n     * Задача 2\n     * @param {{console: {getLine: function}}} params\n     */\n    task2_23042020(params) {\n        let a = [0, 0, 0, 0] //0 - ^, 1 - %2, 2 - %5, 3 - %10\n        let queue = [];\n        let out = 0;\n\n        let n = Number(params.console.getLine())\n        for (let i = 0; i < n; i++) {\n            let b = Number(params.console.getLine());\n\n            if (b % 10 === 0) {\n                b = 3;\n            } else if (b % 5 === 0) {\n                b = 2\n            } else if (b % 2 === 0) {\n                b = 1\n            } else {\n                b = 0\n            }\n\n            queue.push(b)\n\n            if (queue.length > 10) {\n                a[queue.shift()]++;\n            }\n\n            switch (b) {\n                case 0:\n                    out += a[3]\n                    break\n                case 1:\n                    out += a[2] + a[3]\n                    break\n                case 2:\n                    out += a[1] + a[3]\n                    break\n                case 3:\n                    out += a.reduce((a, b) => a + b)\n                    break\n            }\n        }\n\n        return out;\n    }",
  "task3_23042020": "/**\n     * Задача 3\n     * @param {{console: {getLine: function}}} params\n     */\n    task3_23042020(params) {\n        class Bone {\n            constructor(str) {\n                this.a = Number(str.split(' ')[0])\n                this.b = Number(str.split(' ')[1])\n            }\n\n            reverse() {\n                return new Bone(this.b, this.a)\n            }\n        }\n\n        let n = Number(params.console.getLine());\n        let max = 0\n        let bone1 = new Bone(params.console.getLine())\n        let map = [1, 1]\n\n        for (let i = 0; i < n - 1; i++) {\n            let bone2 = new Bone(params.console.getLine())\n            let newMap = [1, 1]\n\n            debugger\n            if (bone1.a === bone2.a && bone1.b === bone2.a) {\n                newMap[0] = Math.max(map[0] + 1, map[1] + 1)\n            }\n            else if (bone1.a === bone2.a) {\n                newMap[0] = map[1] + 1\n            }\n            else if (bone1.b === bone2.a) {\n                newMap[0] = map[0] + 1\n            }\n\n            if (bone1.a === bone2.b && bone1.b === bone2.b) {\n                newMap[1] = Math.max(map[0] + 1, map[1] + 1)\n            }\n            else if (bone1.a === bone2.b) {\n                newMap[1] = map[1] + 1\n            }\n            else if (bone1.b === bone2.b) {\n                newMap[1] = map[0] + 1\n            }\n\n            max = Math.max(newMap[0], newMap[1], max)\n            map = newMap\n            bone1 = bone2\n        }\n\n        return max\n    }",
  "pushkin": "/**\n     * Морзе с зада\n     * @param {{str: string}} params\n     */\n    pushkin(params) {\n        const map = {\n            '*': 'e',\n            '-': 't',\n\n            '**': 'i',\n            '-*': 'a',\n            '*-': 'n',\n            '--': 'm',\n\n            '***': 's',\n            '-**': 'u',\n            '*-*': 'r',\n            '--*': 'w',\n            '**-': 'd',\n            '-*-': 'k',\n            '*--': 'g',\n            '---': 'o',\n\n            '****': 'h',\n            '-***': 'v',\n            '*-**': 'f',\n            // '--**': ''\n            '**-*': 'l',\n            // '-*-*': ''\n            '*--*': 'p',\n            '---*': 'j',\n            '***-': 'b',\n            '-**-': 'x',\n            '*-*-': 'c',\n            '--*-': 'y',\n            '**--': 'z',\n            '-*--': 'q'\n        }\n\n        return params.str.replace(/—/g, '--').replace(/_/g, '-').split('').reverse().join('').split(' ').reduceRight((a, b) => {\n            return a + map[b];\n        }, '')\n    }",
  "pal0505": "/**\n     * Следующий палиндром\n     * @param {{n: string}} params\n     */\n    pal0505(params) {\n        let n = ++params.n;\n\n        if (isPal(n)) return n;\n\n        return constructPal(n);\n\n\n        function isPal(a) {\n            let flag = false\n\n            String(a).split('').forEach((item, id, array) => {\n                if (flag) return;\n                if (item !== array[array.length - 1 - id]) flag = true;\n                if (id === (array.length - 1) / 2) flag = false;\n            })\n\n            return !flag\n        }\n\n        function constructPal(a) {\n            a = String(a);\n            let pal = '';\n            let len = a.length;\n\n            for (let i = 0; i < Math.floor(len / 2); i++) {\n                pal += a[i];\n            }\n\n            if (len % 2) {\n                pal = Number(pal + a[Math.ceil(len / 2) - 1] + pal.split('').reverse().join(''));\n            }\n            else {\n                pal = Number(pal + pal.split('').reverse().join(''));\n            }\n\n            if (pal > a) {\n                return pal;\n            }\n\n            if (len % 2) {\n                return pal + Math.pow(10, Math.floor(len / 2))\n            }\n            else {\n                return pal + 11 * Math.pow(10, Math.floor((len - 2) / 2))\n            }\n\n        }\n    }",
  "median": "/**\n     * Медиана в массиве\n     * @param {{console: {getLine: function}}} params\n     */\n    median(params) {\n        let n = +params.console.getLine();\n        let arr = [];\n        for (let i = 0; i < n; i++) {\n            arr.push(+params.console.getLine());\n        }\n        arr.sort((a, b) => a - b);\n\n        return arr[Math.ceil(arr.length / 2) - 1]\n    }",
  "task3_05052020": "/**\n     * 3 задача\n     * @param {{console: {getLine: function}}} params\n     */\n    task3_05052020(params) {\n        let n = +params.console.getLine();\n        let ar = Array(100).fill(0);\n        let max = 0;\n\n        for (let i = 0; i < n; i++) {\n            let t = +params.console.getLine();\n            let id = t % 100;\n            ar[id] = Math.max(t, ar[id])\n\n            if (id < 12 && ar[12 - id] !== 0 && ar[12 - id] > ar[id]) {\n                max = Math.max(ar[id] + ar[12 - id], max)\n            } else if (id > 12 && ar[99 - id + 13] !== 0 && ar[99 - id + 13] > ar[id]) {\n                max = Math.max(ar[id] + ar[99 - id + 13], max)\n            }\n        }\n\n        return max;\n    }",
  "task1_15052020": "/**\n     * Расшифратор\n     * @param {{n: string}} params\n     */\n    task1_15052020(params) {\n        let map = {\n            '00000': 'y',\n            '00001': 'g',\n            '00010': 'u',\n            '00011': 'm',\n            '001': 't',\n            '01000': 'c',\n            '01001': 'f',\n            '0101': 'h',\n            '0110': 's',\n            '011100': 'b',\n            '011101': 'w',\n            '01111': 'l',\n            '100': 'e',\n            '1010': 'i',\n            '1011': 'r',\n            '1100': 'n',\n            '110100000': 'j',\n            '110100001': 'x',\n            '1101000100':'z',\n            '1101000101': 'q',\n            '110100011': 'k',\n            '1101001': 'v',\n            '110101': 'p',\n            '11011': 'd',\n            '1110': 'o',\n            '1111': 'a'\n        }\n\n        return params.n.replace(/ /g, '').split('').reduce((a, b) => {\n            return (map[a.replace(/[a-z]/g, '') + b]) ? a.replace(/[0-1]/g, '') + map[a.replace(/[a-z]/g, '') + b]: a + b;\n        }, '').toUpperCase();\n    }"
}